//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NguyenDinhThaoForm.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDetails", Namespace="http://schemas.datacontract.org/2004/07/NguyenDinhHung")]
    [System.SerializableAttribute()]
    public partial class UserDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string getMaxeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string getTenxeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string getSoluongField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int getLoaixeField;
        
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string getMaxe {
            get {
                return this.getMaxeField;
            }
            set {
                if ((object.ReferenceEquals(this.getMaxeField, value) != true)) {
                    this.getHocMaxeField = value;
                    this.RaisePropertyChanged("getMaxe");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string getTenxe {
            get {
                return this.getTenxeField;
            }
            set {
                if ((object.ReferenceEquals(this.getTenxeField, value) != true)) {
                    this.getTenxeField = value;
                    this.RaisePropertyChanged("getTenxe");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string getSoluong {
            get {
                return this.getSoluongField;
            }
            set {
                if ((object.ReferenceEquals(this.getSoluongField, value) != true)) {
                    this.getSoluongField = value;
                    this.RaisePropertyChanged("getSoluong");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int getLoaixe {
            get {
                return this.getLoaixeField;
            }
            set {
                if ((this.getLoaixeField.Equals(value) != true)) {
                    this.getLoaixeField = value;
                    this.RaisePropertyChanged("getLoaixe");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertUserDetails", ReplyAction="http://tempuri.org/IService1/InsertUserDetailsResponse")]
        string InsertUserDetails(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertUserDetails", ReplyAction="http://tempuri.org/IService1/InsertUserDetailsResponse")]
        System.Threading.Tasks.Task<string> InsertUserDetailsAsync(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUserDetails", ReplyAction="http://tempuri.org/IService1/SelectUserDetailsResponse")]
        System.Data.DataSet SelectUserDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUserDetails", ReplyAction="http://tempuri.org/IService1/SelectUserDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectUserDetailsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUserDetails", ReplyAction="http://tempuri.org/IService1/DeleteUserDetailsResponse")]
        bool DeleteUserDetails(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUserDetails", ReplyAction="http://tempuri.org/IService1/DeleteUserDetailsResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserDetailsAsync(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUserDetails", ReplyAction="http://tempuri.org/IService1/UpdateUserDetailsResponse")]
        System.Data.DataSet UpdateUserDetails(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUserDetails", ReplyAction="http://tempuri.org/IService1/UpdateUserDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> UpdateUserDetailsAsync(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateRegistrationTable", ReplyAction="http://tempuri.org/IService1/UpdateRegistrationTableResponse")]
        void UpdateRegistrationTable(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateRegistrationTable", ReplyAction="http://tempuri.org/IService1/UpdateRegistrationTableResponse")]
        System.Threading.Tasks.Task UpdateRegistrationTableAsync(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchEmployeeDetails", ReplyAction="http://tempuri.org/IService1/SearchEmployeeDetailsResponse")]
        System.Data.DataSet SearchEmployeeDetails(string searchText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchEmployeeDetails", ReplyAction="http://tempuri.org/IService1/SearchEmployeeDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchEmployeeDetailsAsync(string searchText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckIfMatpExists", ReplyAction="http://tempuri.org/IService1/CheckIfMatpExistsResponse")]
        bool CheckIfMatpExists(int ma);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckIfMatpExists", ReplyAction="http://tempuri.org/IService1/CheckIfMatpExistsResponse")]
        System.Threading.Tasks.Task<bool> CheckIfMatpExistsAsync(int ma);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : NguyenDinhThaoForm.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<NguyenDinhThaoForm.ServiceReference1.IService1>, NguyenDinhThaoForm.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string InsertUserDetails(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo) {
            return base.Channel.InsertUserDetails(userInfo);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserDetailsAsync(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo) {
            return base.Channel.InsertUserDetailsAsync(userInfo);
        }
        
        public System.Data.DataSet SelectUserDetails() {
            return base.Channel.SelectUserDetails();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectUserDetailsAsync() {
            return base.Channel.SelectUserDetailsAsync();
        }
        
        public bool DeleteUserDetails(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo) {
            return base.Channel.DeleteUserDetails(userInfo);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserDetailsAsync(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo) {
            return base.Channel.DeleteUserDetailsAsync(userInfo);
        }
        
        public System.Data.DataSet UpdateUserDetails(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo) {
            return base.Channel.UpdateUserDetails(userInfo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> UpdateUserDetailsAsync(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo) {
            return base.Channel.UpdateUserDetailsAsync(userInfo);
        }
        
        public void UpdateRegistrationTable(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo) {
            base.Channel.UpdateRegistrationTable(userInfo);
        }
        
        public System.Threading.Tasks.Task UpdateRegistrationTableAsync(NguyenDinhThaoForm.ServiceReference1.UserDetails userInfo) {
            return base.Channel.UpdateRegistrationTableAsync(userInfo);
        }
        
        public System.Data.DataSet SearchEmployeeDetails(string searchText) {
            return base.Channel.SearchEmployeeDetails(searchText);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchEmployeeDetailsAsync(string searchText) {
            return base.Channel.SearchEmployeeDetailsAsync(searchText);
        }
        
        public bool CheckIfMatpExists(int ma) {
            return base.Channel.CheckIfMatpExists(ma);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfMatpExistsAsync(int ma) {
            return base.Channel.CheckIfMatpExistsAsync(ma);
        }
    }
}
